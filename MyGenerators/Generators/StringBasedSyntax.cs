using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;

namespace MyGenerators.Generators
{
    public static class StringBasedSyntax
    {
        public static string GenerateSyntax(INamedTypeSymbol type)
        {
            var sb = new StringBuilder();
            sb.AppendLine($@"// <auto-generated/>
using System;
using System.Collections;
using MyGenerators;

namespace {type.ContainingNamespace.ToDisplayString()}
{{
    public partial class {type.Name} : ISupportDictionaryConversion
    {{
        public void WriteToDictionary(IDictionary<string, object> dictionary)
        {{
");

            // Generate the WriteToDictionary-method for every member
            var props = type.GetMembers()
                .Where(m => m.Kind == SymbolKind.Property)
                .Cast<IPropertySymbol>()
                .ToList();

            foreach (var prop in props)
            {
                sb.AppendLine($@"                dictionary[""{prop.Name}""] = {prop.Name};");
            }

            sb.AppendLine($@"
        }}

        public void ReadFromDictionary(IReadOnlyDictionary<string, object> dictionary) 
        {{
");

            foreach (var prop in props)
            {
                sb.AppendLine($@"
                if (dictionary.TryGetValue(""{prop.Name}"", out var {prop.Name.ToLowerInvariant()}_value))
                {{
                    {prop.Name} = ({prop.Type.ToDisplayString()}){prop.Name.ToLowerInvariant()}_value;
                }}");
            }

            sb.AppendLine($@"
        }}
    }}
}}");

            return sb.ToString();
        }
    }
}